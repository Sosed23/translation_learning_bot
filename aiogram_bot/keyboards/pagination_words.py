from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from database import crud as rq


def get_navigation_keyboard(current_index, total_items):
    buttons = []
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
    if current_index > 0:
        buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                                            callback_data=f"prev_{current_index}"))
    # –ö–Ω–æ–ø–∫–∞ "–í–ø–µ—Ä–µ–¥", –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç
    if current_index < total_items - 1:
        buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è",
                                            callback_data=f"next_{current_index}"))
    return InlineKeyboardMarkup(inline_keyboard=[buttons])


async def show_paginated_item(message, items, current_index, state, edit=False):
    current_item = items[current_index]

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    title = current_item.title
    translation = current_item.translation
    transcription = current_item.transcription
    image_id_bot = current_item.image_id_bot
    audio_id_bot = current_item.audio_id_bot
    word_id = current_item.id
    lesson_id = current_item.lesson_id
    user_id = current_item.user_id

    await rq.create_history_views_word(word_id=word_id, lesson_id=lesson_id, user_id=user_id)

    history_view = await rq.get_history_views_by_lesson_and_word(word_id=word_id, lesson_id=lesson_id, user_id=user_id)

    if history_view is not None:
        count_history_view = len(history_view)
    else:
        count_history_view = 0

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    item_summary = (f"–¢–µ–∫—Å—Ç: <strong>{title}</strong>\n"
                    f"–ü–µ—Ä–µ–≤–æ–¥: <strong>{translation}</strong>\n"
                    f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è: <strong>[{transcription}]</strong>\n\n"
                    f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: üëÅ‚Äçüó® <strong>{count_history_view}</strong>'
                    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
    if image_id_bot:
        media_photo = InputMediaPhoto(
            media=image_id_bot, caption=item_summary, parse_mode="HTML")
        if edit:
            try:
                await message.edit_media(media=media_photo, reply_markup=get_navigation_keyboard(current_index, len(items)))
            except Exception as e:
                await message.answer_photo(photo=image_id_bot, caption=item_summary, reply_markup=get_navigation_keyboard(current_index, len(items)), parse_mode="HTML")
        else:
            await message.answer_photo(photo=image_id_bot, caption=item_summary, reply_markup=get_navigation_keyboard(current_index, len(items)), parse_mode="HTML")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—É–¥–∏–æ
    if audio_id_bot:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—É–¥–∏–æ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        previous_audio_message_id = data.get('audio_message_id')

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—É–¥–∏–æ, –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if previous_audio_message_id:
            try:
                await message.bot.delete_message(chat_id=message.chat.id, message_id=previous_audio_message_id)
            except Exception as e:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        audio_message = await message.answer_voice(voice=audio_id_bot)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(audio_message_id=audio_message.message_id)

    # –ï—Å–ª–∏ –Ω–∏ —Ñ–æ—Ç–æ, –Ω–∏ –∞—É–¥–∏–æ –Ω–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
    if not image_id_bot and not audio_id_bot:
        if edit:
            await message.edit_text(item_summary, reply_markup=get_navigation_keyboard(current_index, len(items)), parse_mode="HTML")
        else:
            await message.answer(item_summary, reply_markup=get_navigation_keyboard(current_index, len(items)), parse_mode="HTML")


async def handle_previous(callback_query, state):
    data = await state.get_data()
    current_index = data['current_index']

    # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
    new_index = current_index - 1
    await state.update_data(current_index=new_index)

    items = data['items']
    await show_paginated_item(callback_query.message, items, new_index, state=state, edit=True)
    await callback_query.answer()


async def handle_next(callback_query, state):
    data = await state.get_data()
    current_index = data['current_index']

    # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç
    new_index = current_index + 1
    await state.update_data(current_index=new_index)

    items = data['items']
    await show_paginated_item(callback_query.message, items, new_index, state=state, edit=True)
    await callback_query.answer()
